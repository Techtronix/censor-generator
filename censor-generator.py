#!/usr/bin/env python3
"""
Generate a censor configuration for InspIRCd

Copyright (c) 2020 Michael Hazell <michaelhazell@hotmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import argparse
import requests

parser = argparse.ArgumentParser(
    description='Generate a censor.conf file for InspIRCd')
parser.add_argument('-o', '--output', type=str, default='',
                    help='Output file, where the configuration will be written. If not specified, output will be written to stdout.')
parser.add_argument('-r', '--replace', type=str, default='',
                    help='Replacement string for censored words. If not specified, replacement string will be asterisks.')
parser.add_argument('-u', '--url', type=str,
                    default='', help='URL of the word list. It is expected to be a plaintext list.')
args = parser.parse_args()


def main():
    # Check to see if a URL was provided. Bail if not.
    if len(args.url) == 0:
        parser.print_help()
        print(
            '[error] Word list URL missing. Please provide a URL that serves a plaintext list.')
        return

    # Fetch the specified URL
    response = requests.get(args.url)
    if response.status_code != 200:
        print('[error] URL request did not return OK status')
        return

    # If no output file specified, print to stdout
    use_file: bool = len(args.output) != 0
    output_file = None
    if use_file:
        output_file = open(args.output, 'w')
        output_file.write(
            '# censor.conf auto-generated by censor-generator.py\n')
    else:
        print('# censor.conf auto-generated by censor-generator.py')

    # If a default replacement text was specified, use it
    use_replace: bool = len(args.replace) != 0
    for word in response.iter_lines(decode_unicode=True):
        # The actual replacement string
        replace: str = ''
        if use_replace:
            replace = args.replace
        else:
            replace = stars(len(word))
        line = f'<badword text="{word}" replace="{replace}">\n'
        if use_file:
            output_file.write(line)
        else:
            print(line, end='')

    if use_file:
        output_file.close()


def stars(len: int) -> str:
    """Return a 'len'-sized string of asterisks"""
    stars: str = ''
    for i in range(0, len):  # pylint: disable=unused-variable
        stars += '*'
    return stars


if __name__ == "__main__":
    main()
